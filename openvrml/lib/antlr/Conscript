# -*- CPerl -*-
#
# $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file is a part of the Scooter project. 
#
# Copyright (c) 2004. Dimitry Kloper <dimka@cs.technion.ac.il> . 
# Technion, Israel Institute of Technology. Computer Science Department.
#
# Conscript -- constructtion file for antlr library for openvrml
#

Import qw(BLIB toolset options version);

my $ruleset  = $toolset->env();

die if( !defined( $ruleset ) );

our $BUILD      = $toolset->option( 'build' );
our $INCLUDE    = [ "%STLPORT_INCLUDE", "%BOOST_INCLUDE", "." ];
our $DEFINE     = [ "-DANTRL_EXPORT" ];

Link $BUILD => 'src';

$ruleset->{'LDFLAGS'} .= 
  q( -mthreads -Wl,-enable-stdcall-fixup) . 
  q( -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc);
map { $ruleset->{'CXXFLAGS'} .= " $_"; } @$DEFINE;

our $buildenv   = new cons( %{$ruleset},
			   'CPPPATH' => $INCLUDE );

my $DLLTGT = "$BUILD/cr" . $version->get('hash')->{'stable'} . 
             "antlr%{SUFDLL}";
my $LIBTGT = "$BUILD/%{PREFLIB}antlr%{SUFLIB}";

KeepPrecious $buildenv $DLLTGT;
KeepPrecious $buildenv $LIBTGT;

my @srclist =  
  map( "$BUILD/$_", 
       qw( ANTLRUtil.cpp
	   ASTFactory.cpp
	   ASTNULLType.cpp
	   ASTRefCount.cpp
	   BaseAST.cpp
	   BitSet.cpp
	   CharBuffer.cpp
	   CharScanner.cpp
	   CommonAST.cpp
	   CommonASTWithHiddenTokens.cpp
	   CommonHiddenStreamToken.cpp
	   CommonToken.cpp
	   InputBuffer.cpp
	   LLkParser.cpp
	   MismatchedCharException.cpp
	   MismatchedTokenException.cpp
	   NoViableAltException.cpp
	   NoViableAltForCharException.cpp
	   Parser.cpp
	   RecognitionException.cpp
	   String.cpp
	   Token.cpp
	   TokenBuffer.cpp
	   TokenStreamBasicFilter.cpp
	   TokenStreamHiddenTokenFilter.cpp
	   TokenStreamSelector.cpp
	   TreeParser.cpp ) );
       
my @hdrlist =  
  map( "antlr/$_", 
       qw( ANTLRException.hpp
	   ANTLRUtil.hpp
	   AST.hpp
	   ASTArray.hpp
	   ASTFactory.hpp
	   ASTNULLType.hpp
	   ASTPair.hpp
	   ASTRefCount.hpp
	   BaseAST.hpp
	   BitSet.hpp
	   CharBuffer.hpp
	   CharInputBuffer.hpp
	   CharScanner.hpp
	   CharStreamException.hpp
	   CharStreamIOException.hpp
	   CircularQueue.hpp
	   CommonAST.hpp
	   CommonASTWithHiddenTokens.hpp
	   CommonHiddenStreamToken.hpp
	   CommonToken.hpp
	   IOException.hpp
	   InputBuffer.hpp
	   LLkParser.hpp
	   LexerSharedInputState.hpp
	   MismatchedCharException.hpp
	   MismatchedTokenException.hpp
	   NoViableAltException.hpp
	   NoViableAltForCharException.hpp
	   Parser.hpp
	   ParserSharedInputState.hpp
	   RecognitionException.hpp
	   RefCount.hpp
	   SemanticException.hpp
	   String.hpp
	   Token.hpp
	   TokenBuffer.hpp
	   TokenStream.hpp
	   TokenStreamBasicFilter.hpp
	   TokenStreamException.hpp
	   TokenStreamHiddenTokenFilter.hpp
	   TokenStreamIOException.hpp
	   TokenStreamRecognitionException.hpp
	   TokenStreamRetryException.hpp
	   TokenStreamSelector.hpp
	   TreeParser.hpp
	   TreeParserSharedInputState.hpp
	   config.hpp ) );
       

Modules $buildenv [$DLLTGT, $LIBTGT], @srclist, 
  qq(%CXX -shared %LDFLAGS -o ) . 
  FilePathEnv($buildenv,$DLLTGT) . 
  qq( -Wl,--out-implib,) . 
  FilePathEnv($buildenv,$LIBTGT) . 
  qq( %< %_LDIRS %LIBS);

Install $buildenv "$BLIB/include/antlr", @hdrlist;

Install $buildenv "$BLIB/lib", $LIBTGT;
Install $buildenv "$BLIB/bin", $DLLTGT;

#
# Conscript -- end of file
#

