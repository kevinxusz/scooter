# -*- CPerl -*-
#
# $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file is a part of the Scooter project. 
#
# Copyright (c) 2004. Dimitry Kloper <dimka@cs.technion.ac.il> . 
# Technion, Israel Institute of Technology. Computer Science Department.
#
# Conscript -- construction file for libopenvrml core
#

Import qw(BLIB toolset options version);

my $ruleset  = $toolset->env();

die if( !defined( $ruleset ) );

our $BUILD      = $toolset->option( 'build' );
our $INCLUDE    = [ "%STLPORT_INCLUDE", 
		    "%BOOST_INCLUDE",
		    "$BLIB/include",
		    "$BLIB/include/openvrml" ];
our $DEFINE = [ "%STLPORT_DEFINE", "%BOOST_DEFINE",
		"-DOPENVRML_ENABLE_GZIP=1",
		"-DOPENVRML_ENABLE_GIF=1",
		"-DOPENVRML_ENABLE_JPEG=1",
		"-DOPENVRML_ENABLE_PNG=1" ];
our $LIBPATH = [ "%STLPORT_LIB",
		 "%BOOST_LIB",
		 "$BLIB/lib" ];
		
push @$DEFINE, "-DOPENVRML_ENABLE_BOOST_REGEX=1" if($ruleset->{'BOOST_ROOT'});

Link $BUILD => 'openvrml';

$ruleset->{'LDFLAGS'} .= 
  q( -mthreads -Wl,-enable-stdcall-fixup) . 
  q( -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc);
$ruleset->{'CXXFLAGS'} .= ' ' . join(' ', @$DEFINE) if( $DEFINE );

our $buildenv   = new cons( %{$ruleset},
			   'CPPPATH' => $INCLUDE,
			   'LIBPATH' => $LIBPATH,
			   'LIBS' => q(-lpng -ljpeg -lzlib -lantlr -lwsock32 -lboost_regex%BOOST_LIB_SUFFIX ) );

my $DLLTGT = "$BUILD/cr" . $version->get('hash')->{'stable'} . 
             "openvrml%{SUFDLL}";
my $LIBTGT = "$BUILD/%{PREFLIB}openvrml%{SUFLIB}";

KeepPrecious $buildenv $DLLTGT;
KeepPrecious $buildenv $LIBTGT;

my @srclist = 
  map( "$BUILD/$_", 
       qw( ScriptJDK.cpp
	   basetypes.cpp
	   bounding_volume.cpp
	   browser.cpp
	   doc.cpp
	   field.cpp
	   field_value_ptr.cpp
	   frustum.cpp
	   img.cpp
	   node.cpp
	   node_class_ptr.cpp
	   node_ptr.cpp
	   node_type_ptr.cpp
	   rendering_context.cpp
	   scope.cpp
	   scope_ptr.cpp
	   script.cpp
	   system.cpp
	   viewer.cpp
	   vrml97node.cpp ) );

my @hdrlist = 
  map( "openvrml/$_", 
       qw( ScriptJDK.h
	   basetypes.h
	   bounding_volume.h
	   browser.h
	   common.h
	   doc.h
	   field.h
	   field_value_ptr.h
	   frustum.h
	   img.h
	   node.h
	   node_class_ptr.h
	   node_ptr.h
	   node_type_ptr.h
	   private.h
	   rendering_context.h
	   scope.h
	   scope_ptr.h
	   script.h
	   system.h
	   viewer.h
	   vrml97node.h) );

Modules $buildenv [$DLLTGT, $LIBTGT], @srclist, 
  qq(%CXX -shared %LDFLAGS -o ) . 
  FilePathEnv($buildenv,$DLLTGT) . 
  qq( -Wl,--out-implib,) . 
  FilePathEnv($buildenv,$LIBTGT) . 
  qq( %< %_LDIRS %LIBS);

Install $buildenv "$BLIB/include/openvrml", @hdrlist;

Install $buildenv "$BLIB/lib", $LIBTGT;
Install $buildenv "$BLIB/bin", $DLLTGT;

#
# Conscript -- end of file
#

