# -*- mode:python -*-
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file is a part of the Scooter project (http://sctr.sf.net). 
#
# libxml2/SConscript -- construction file for libxml
#

import os 
import sys
import string

Import('env', 'version')

env = env.Clone()

variant = env.subst('$VARIANT')
env.VariantDir(variant, '../ext/libxml2')

env.Append(CPPPATH = ['#blib/include', 
                      variant,
                      os.path.join(variant, 'include') ])
env.Append(CPPDEFINES = [ 'NOLIBTOOL',
                          'HAVE_WIN32_THREADS',
                          'HAVE_COMPILER_TLS',
                          'HAVE_ZLIB_H'])

env.Append(CFLAGS = ['-mthreads'])

env.Append(LIBPATH = ['#blib/lib'])
env.Append(LDFLAGS = ['-mthreads', '-mconsole'])

xmlversion = env.Substfile(
    source =  os.path.join(variant, 'include', 'libxml', 'xmlversion.h.in'),
    SUBST_DICT = {
        '@VERSION@': '2.9.0',
        '@LIBXML_VERSION_NUMBER@': '20900',
        '@LIBXML_VERSION_EXTRA@': '',
        '@WITH_OUTPUT@': 1,
        '@WITH_TRIO@': 0,
        '@WITH_THREADS@': 1,
        '@WITH_TREE@': 1,
        '@WITH_PUSH@': 1,
        '@WITH_READER@': 1,
        '@WITH_PATTERN@': 1,
        '@WITH_WRITER@': 1,
        '@WITH_SAX1@': 1,
        '@WITH_FTP@': 0,
        '@WITH_HTTP@': 0,
        '@WITH_VALID@': 1,
        '@WITH_HTML@': 1,
        '@WITH_LEGACY@': 0,
        '@WITH_C14N@': 1,
        '@WITH_CATALOG@': 1,
        '@WITH_DOCB@': 1,
        '@WITH_XPATH@': 1,
        '@WITH_XPTR@': 1,
        '@WITH_XINCLUDE@': 1,
        '@WITH_ICONV@': 0,
        '@WITH_ICU@': 0,
        '@WITH_ISO8859X@': 0,
        '@WITH_DEBUG@': 1,
        '@WITH_RUN_DEBUG@': 1,
        '@WITH_MEM_DEBUG@': 1,
        '@WITH_REGEXPS@': 0,
        '@WITH_SCHEMAS@': 0,
        '@WITH_SCHEMATRON@': 1,
        '@WITH_MODULES@': 1,
        '@WITH_ZLIB@': 1,
        '@WITH_LZMA@': 0        
        }
    )

srclist = map( lambda fname: os.path.join(variant,fname), 
               [ 'buf.c',
                 'c14n.c',
                 'catalog.c',
                 'chvalid.c',
                 'debugXML.c',
                 'dict.c',
                 'DOCBparser.c',
                 'encoding.c',
                 'entities.c',
                 'error.c',
                 'globals.c',
                 'hash.c',
                 'HTMLparser.c',
                 'HTMLtree.c',
                 'legacy.c',
                 'list.c',
                 'nanoftp.c',
                 'nanohttp.c',
                 'parser.c',
                 'parserInternals.c',
                 'pattern.c',
                 'relaxng.c',
                 'SAX.c',
                 'SAX2.c',
                 'schematron.c',
                 'threads.c',
                 'tree.c',
                 'uri.c',
                 'valid.c',
                 'xinclude.c',
                 'xlink.c',
                 'xmlIO.c',
                 'xmlmemory.c',
                 'xmlreader.c',
                 'xmlregexp.c',
                 'xmlmodule.c',
                 'xmlsave.c',
                 'xmlschemas.c',
                 'xmlschemastypes.c',
                 'xmlunicode.c',
                 'xmlwriter.c',
                 'xpath.c',
                 'xpointer.c',
                 'xmlstring.c' ] )
inclist = map( lambda fname: os.path.join(variant, 'include', 'libxml', fname), 
               [ 'c14n.h',
                 'catalog.h',
                 'chvalid.h',
                 'debugXML.h',
                 'dict.h',
                 'DOCBparser.h',
                 'encoding.h',
                 'entities.h',
                 'globals.h',
                 'hash.h',
                 'HTMLparser.h',
                 'HTMLtree.h',
                 'list.h',
                 'nanoftp.h',
                 'nanohttp.h',
                 'parser.h',
                 'parserInternals.h',
                 'pattern.h',
                 'relaxng.h',
                 'SAX.h',
                 'SAX2.h',
                 'schemasInternals.h',
                 'schematron.h',
                 'threads.h',
                 'tree.h',
                 'uri.h',
                 'valid.h',
                 'xinclude.h',
                 'xlink.h',
                 'xmlautomata.h',
                 'xmlerror.h',
                 'xmlexports.h',
                 'xmlIO.h',
                 'xmlmemory.h',
                 'xmlmodule.h',
                 'xmlreader.h',
                 'xmlregexp.h',
                 'xmlsave.h',
                 'xmlschemas.h',
                 'xmlschemastypes.h',
                 'xmlstring.h',
                 'xmlunicode.h',
                 'xmlversion.h',
                 'xmlwriter.h',
                 'xpath.h',
                 'xpathInternals.h',
                 'xpointer.h' ])


zlib_name = env.subst('${CRSHPREFIX}zlib')
libxml2_name = env.subst('${CRSHPREFIX}libxml2')

libxml2 = env.SharedLibrary(
    target = os.path.join(variant,libxml2_name), 
    source = srclist,
    LIBS = [ zlib_name ]
)

env.Install('#blib/bin', libxml2[0])
env.Install('#blib/lib', libxml2[1])
env.Install('#blib/include/libxml', inclist)

#
# SConscript -- end of file
#

