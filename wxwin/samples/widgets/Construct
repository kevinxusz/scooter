# -*- CPerl -*-
#
# $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file is a part of the Scooter project. 
#
# Copyright (c) 2004. Dimitry Kloper <dimka@cs.technion.ac.il> . 
# Technion, Israel Institute of Technology. Computer Science Department.
#
# Construct -- construct file for wxwin/samples/widgets
#

use strict;
use Cwd;

use File::Find;
use File::Path;

use Cons::Common;
use Cons::Toolset;

our $options = { 'verbose' => 1 };
our $toolset = Cons::Toolset->getopt( %$options );
our $BLIB    = "../../../blib";
our $defines;

die if( !defined( $toolset ) );

my $ruleset  = $toolset->env();

$defines = {
    'WIN32' => undef,
    '__WIN32__' => undef,
    '_WINDOWS' => undef,
    'WINVER' => "0x0400",
    '__WIN95__' => undef,
    'STRICT' => undef,
    '__WINDOWS__' => undef,	
    '__WXMSW__' => undef,
};

  
our $BUILD      = $toolset->option( 'build' );
our $INCLUDE    = [ "%ZLIB_INCLUDE",
		    "%JPEG_INCLUDE",
		    "%LIBPNG_INCLUDE",
		    "$BLIB/include",
		    "." ];

for my $define (keys( %$defines )) {
    $ruleset->{'CXXFLAGS'} .= " -D$define";
    $ruleset->{'CXXFLAGS'} .= "=" . $defines->{$define} 
      if( defined( $defines->{$define} ) );
}

our $LIBPATH    = [ "$BLIB/lib", "%ZLIB_LIB", "%JPEG_LIB", "%LIBPNG_LIB" ];
our $LIBS       = join( ' ' , qw( -lwxcommon
				  -lwxgeneric 
				  -lwxregex
				  -lwxhtml
				  -lwxmsw
				  -lzlib 
				  -llibjpeg 
				  -llibpng
				  -lkernel32 
				  -luser32
				  -lgdi32
				  -lcomdlg32
				  -lwinspool
				  -lwinmm
				  -lshell32
				  -loldnames
				  -lcomctl32
				  -lodbc32
				  -lole32
				  -loleaut32
				  -luuid
				  -lrpcrt4
				  -ladvapi32
				  -lwsock32 ) );

our $buildenv   = new cons( %{$ruleset},
			   'CPPPATH' => $INCLUDE,
			   'LIBPATH' => $LIBPATH,
			   'LIBS'    => $LIBS );

my $TARGET = "$BUILD/widgets%{SUFEXE}";

Link $BUILD => '.';

KeepPrecious $buildenv $TARGET;

Command $buildenv "$BUILD/widgetsres.obj", "widgets.rc",
  qq(%RC -r -I$BLIB/include -fo%> %<);

Program $buildenv $TARGET, 
  map( "$BUILD/$_", qw( 
button.cpp
combobox.cpp
gauge.cpp
listbox.cpp
notebook.cpp
radiobox.cpp
slider.cpp
spinbtn.cpp
static.cpp
textctrl.cpp
widgets.cpp
widgetsres.obj
) );
  
map { 
    if( /^-/ ) {
	say( "error: unknown option $_", 'verbose' => 1 );
	die;
    } elsif( /^clean$/ ) {
	clean( cwd() );
	return 1;
    } else {
	say( "error: unknown command $_", 'verbose' => 1 );
	die;
    }
} @ARGV;


sub clean {
    my ($root) = @_;
    find( sub {
	      if( /\.(o|a|so|obj|exe|lib|pdb|idb|pch|ilk)$/i ) {
		  print "removing $File::Find::name\n";
		  unlink;
	      } 
	  }, $root );

    my $dirs = [];
    find( sub {
	      if( /Debug[\/\\]*$/ and -d ) {
		  push @$dirs, $File::Find::name;
	      } elsif( /Release[\/\\]*$/ and -d ) {
		  push @$dirs, $File::Find::name;
	      }
	  }, $root );
    if( scalar( @$dirs ) ) { 
	rmtree( $dirs, 1 );
    }
}



#
# Construct -- end of file
#

