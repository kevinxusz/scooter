# -*- CPerl -*-
#
# $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file is a part of the Scooter project. 
#
# Copyright (c) 2004. Dimitry Kloper <dimka@cs.technion.ac.il> . 
# Technion, Israel Institute of Technology. Computer Science Department.
#
# Conscript -- Conscript file for dgd
#

use Data::Dumper;
use Cons::Template;
use Cons::Common;

Import qw(BLIB toolset options version);

my $ruleset  = $toolset->env();

die if( !defined( $ruleset ) );

our $BUILD      = $toolset->option( 'build' );
our $INCLUDE    = [ "..", "%STLPORT_INCLUDE", "%BOOST_INCLUDE", 
		    "$BLIB/include" ];
our $DEFINE     = [ "-DDGD_BUILD_DLL" ];
our $LIBPATH    = [ "%STLPORT_LIB",
		    "%BOOST_LIB",
		    "$BLIB/lib" ];

#$ruleset->{'CXXFLAGS'} .= " -DDGD_INTERNAL_DEBUG=1";
map { $ruleset->{'CXXFLAGS'} .= " $_"; } @$DEFINE;

Link $BUILD => 'src';

our $buildenv   = new cons( %{$ruleset},
			    'CPPPATH' => $INCLUDE,
			    'LIBPATH' => $LIBPATH,
			    'LIBS' => q(-lboost_regex%BOOST_LIB_SUFFIX ) );

my $DLLTGT = "$BUILD/cr" . $version->get('hash')->{'stable'} .
             "dgd%{SUFDLL}";
my $LIBTGT = "$BUILD/%{PREFLIB}dgd%{SUFLIB}";

KeepPrecious $buildenv $LIBTGT;
KeepPrecious $buildenv $DLLTGT;

my @srclist = 
  map( "$BUILD/$_", 
       qw( dgChannel.cpp
	   dgChannelBuf.cpp
	   dgDebug.cpp
	   dgDebugOpt.cpp
	   dgFunnel.cpp
	   dgMultifileLog.cpp
	   dgOptionFilter.cpp ) );

Modules $buildenv [$DLLTGT, $LIBTGT], @srclist, 
  qq(%CXX -shared %LDFLAGS -o ) . 
  FilePathEnv($buildenv,$DLLTGT) . 
  qq( -Wl,--out-implib,) . 
  FilePathEnv($buildenv,$LIBTGT) . 
  qq( %< %_LDIRS %LIBS);

Install $buildenv "$BLIB/include", 
  map( "$BUILD/$_", qw(dgChannel.h
		       dgChannelBuf.h
		       dgChannelManip.h
		       dgConfig.h
		       dgDebug.h
		       dgDebugExtra.h
		       dgDebugOpt.h
		       dgDebugStd.h
		       dgFunnel.h
		       dgMultifileLog.h
		       dgOptionFilter.h
		       dgStream.h
		       dgBoost.h ) );

Install $buildenv "$BLIB/lib", $LIBTGT;
Install $buildenv "$BLIB/bin", $DLLTGT;

map {
    my $src = "$BUILD/$_";
    my $tgt = $src;
    $tgt =~ s/.in$//i;
    Command $buildenv $tgt, $src, "$BLIB/config/config-local.dpo",
      q([perl] template_apply( '%>', qw(%<) ); );
} qw( dgConfig.h.in );

our $version = Cons::VersionControl->open( 'dgd' );

sub template_apply {
    my ($tgt, $src, $dpo) = @_;

    my $config = eval( "do '$dpo';" );    
    if( $@ ) {
	say( "error: cant load $dpo: $@" );
	return 0;
    }
	
    our $params = { 'version' => \$version, 
		    'toolset' => \$toolset,
		    'config' => \$config };
    my $rc = Cons::Template->apply( $tgt, $src, $params );
    return $rc;
}


if( defined($ruleset->{'CLOXXCOM'}) ) {
    Command $buildenv [ "$BUILD/dgDebugOpt.h", 
			"$BUILD/dgDebugOpt.cpp" ], 
			  "$BUILD/dgDebugOpt.xml",
			    qq(#%CLOXXCOM# -Dcxx_header_file=%<:b.h ) .
			    qq(-Dcxx_include_files=dgConfig.h ) .
			    qq(-Dcxx_namespace=DGD ) . 
			    qq(-Dcxx_source_file=%<:b.cpp -o c++ %<);
}

#
# Conscript -- end of file
#

