# -*- mode:python -*-
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Copyright (c) Dimitry Kloper <kloper@users.sf.net> 2002-2012
# 
# This file is a part of the Scooter project. 
# 
# boxfish/SConscript -- construction file for boxfish3d
#

import os 
import sys
import string

Import('env', 'version')

env = env.Clone()

env.Tool('qt')

variant = env.subst('$VARIANT')
env.VariantDir(variant, 'src')

env.Append(CPPPATH = ['#blib/include', '$DGDINC'] )
env.Append(CPPDEFINES = {
    'UNICODE': None,
    'QT_LARGEFILE_SUPPORT': None,
    'QT_DLL': None,
    'QT_SVG_LIB': None,
    'QT_GUI_LIB': None,
    'QT_CORE_LIB': None,
    'QT_THREAD_SUPPORT': None,
    'QT_XML_LIB': None,
    'QT_OPENGL_LIB': None,
    'WINVER': '0x0502',
    'OPENVRML_USE_DLL': None
   })

env.Append(CXXFLAGS = ['-mthreads', 
                       '-Wno-attributes',
                       '-isystem', '$BOOSTINCDIR',
                       '-isystem', '$QT_CPPPATH'])

env.Append(LIBPATH = ['#blib/lib', '$BOOSTLIBDIR', '$QT_LIBPATH'])
env.Append(LDFLAGS = ['-mthreads', '-mconsole'])

conf = env.Substfile(
    source = 'src/boxfish_config.h.in',
    target = os.path.join(variant, 'boxfish_config.h'),
    SUBST_DICT = {
        '@version_string@': '{}.{}.{}'.format(version.version['stable'],
                                              version.version['major'],
                                              version.version['build']),
        '@version_comma@': '{},{},{},0'.format(version.version['stable'],
                                              version.version['major'],
                                              version.version['build']),
       }
   )

resfile = env.RES(os.path.join(variant, 'boxfish.rc'))

qrcfile = os.path.join(variant, 'boxfish.qrc')
env.Depends(qrcfile, os.path.join(variant, 'boxfish_cfg_def.xml'))

qresfile = env.Command(
    source = qrcfile,
    target = os.path.join(variant, 'boxfish-qres.cpp'),
    action = '$QT_BINPATH/rcc -name boxfish $SOURCE -o $TARGET'
    )

srclist = map( lambda fname: os.path.join(variant,fname), 
               [ 'boxfish_cfg.cpp',
                 'boxfish_svg.cpp',
                 'boxfish_main.cpp',
                 'boxfish_console.cpp',
                 'boxfish_download_fetcher.cpp',
                 'boxfish_download_source.cpp',
                 'boxfish_vrml_scene_item.cpp',
                 'boxfish_vrml_scene_map.cpp',
                 'boxfish_vrml_loader.cpp',
                 'boxfish_vrml_scene_tree.cpp',
                 'boxfish_vrml_scene_model.cpp',
                 'boxfish_vrml_extrusion.cpp',
                 'boxfish_vrml_ifs.cpp',
                 'boxfish_vrml_bg.cpp',
                 'boxfish_vrml_control.cpp',
                 'boxfish_vrml_tess.cpp',
                 'boxfish_vrml_polytess.cpp',
                 'boxfish_portal.cpp',
                 'boxfish_document.cpp' ]) 



zlib_name = env.subst('${CRSHPREFIX}zlib')
libcurl_name = env.subst('${CRSHPREFIX}libcurl')
libjpeg_name = env.subst('${CRSHPREFIX}libjpeg')
libpng_name = env.subst('${CRSHPREFIX}libpng')
libxml2_name = env.subst('${CRSHPREFIX}libxml2')
libopenvrml_dl_name = env.subst('${CRSHPREFIX}openvrml-dl')
libopenvrml_name = env.subst('${CRSHPREFIX}openvrml')

boost_libs = map( lambda lib: lib + '$BOOST_LIB_SUFFIX',
                  [ 'boost_program_options',
                    'boost_filesystem',
                    'boost_system',
                    'boost_thread' ])

qt_libs = [ 'QtCored4', 'QtGuid4', 'QtXmld4', 'QtSvgd4', 'QtOpenGLd4' ]

windows_libs = [ 'wsock32', 'opengl32', 'glu32' ]

boxfish = env.Program(
    target = os.path.join(variant, 'boxfish3d'), 
    source = srclist + resfile + qresfile,
    LIBS = [ zlib_name, 
             libcurl_name,
             libpng_name, 
             libjpeg_name, 
             libxml2_name, 
             libopenvrml_name,
             libopenvrml_dl_name ] + 
    boost_libs +
    qt_libs +
    windows_libs
)

env.Install('#blib/bin', boxfish[0])

#
# SConscript -- end of file
#

