# -*- CPerl -*-
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Copyright (c) Dimitry Kloper <kloper@users.sf.net> 2002-2012
# 
# This file is a part of the Scooter project. 
# 
# Conscript -- conscript file for Chromium
#

use Cons::VersionControl;

Import qw(BLIB toolset options);

my $ruleset  = $toolset->env();
die if( !defined( $ruleset ) );

$ruleset->{'LDFLAGS'} .= q( -mthreads -Wl,-enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-subsystem,console);
$ruleset->{'CXXFLAGS'} .= q( -mthreads -isystem %BOOST_INCLUDE);

our $BUILD      = $toolset->option( 'build' );
our $INCLUDE    = join( ';', 
			( "..",
			  "%STLPORT_INCLUDE", 
			  "%QT_INCLUDE",
                          "%DGD_INCLUDE",
			  "$BLIB/include" )
		       );

our $DEFINE     = [ "%STLPORT_DEFINE", 
		    "%BOOST_DEFINE", 
		    "%QT_DEFINE",
		    "-D_TRACE" ];

 our $LIBPATH    = [ "$BLIB/lib", 
		     "%STLPORT_LIB", 
		     "%BOOST_LIB", 
		     "%QT_LIB" ];

our $LIBS       = join( ' ' , qw( -lopenvrml 
				  -lantlr
				  -lqtmain
				  -lQtCore4
				  -lQtGui4
				  -lQt3Support4
				  -lQtOpenGL4
				  -lQtSvg4
				  -lQtXml4
				  -ljpeg 
				  -lpng
				  -lwsock32 
				  -lopengl32 
				  -lglu32
				  -lboost_regex%BOOST_LIB_SUFFIX
                                  -lboost_filesystem%BOOST_LIB_SUFFIX
                                  -lboost_system%BOOST_LIB_SUFFIX
                                  -lboost_thread%BOOST_LIB_SUFFIX
                                  -lboost_program_options%BOOST_LIB_SUFFIX
				  -lzlib ) );
				  
our $version    = Cons::VersionControl->open();

map { $ruleset->{'CXXFLAGS'} .= " $_" } @$DEFINE;

Link $BUILD => 'src';

our $buildenv   = new cons( %{$ruleset},
			   'CPPPATH' => $INCLUDE,
			   'LIBPATH' => $LIBPATH,
			   'LIBS'    => $LIBS );

my $TARGET = "$BUILD/cr%{SUFEXE}";

Command $buildenv "$BUILD/chromiumres%SUFOBJ", "src/chromium.rc",
  qq(%RC --use-temp-file -v -Iblib/include -Ichromium/$BUILD -Ichromium/src %< -o %>);

Command $buildenv "$BUILD/%{PREFQRC}chromium.cpp", "src/chromium.qrc",
  qq(%QRC -name chromium %< -o %>);

KeepPrecious $buildenv $TARGET;
AfterBuild $buildenv $TARGET, q( 
  if( $status eq 'built' ) {
     $version->save();
     print "AfterBuild: version incremented to " . $version->string() . "...\n"
  }
);

Program $buildenv $TARGET, 
  map( "$BUILD/$_", qw( cr_main.cpp
			cr_cfg.cpp
			cr_svg.cpp
			cr_portal.cpp
			cr_vrml_loader.cpp
			cr_document.cpp
			cr_mesh.cpp
			cr_mesh_scene.cpp
			cr_mesh_control.cpp
			cr_mesh_editor.cpp
			cr_vrml_control.cpp
			cr_vrml_scene_map.cpp
			cr_vrml_scene_model.cpp
			cr_vrml_scene_item.cpp
			cr_vrml_scene_tree.cpp
			%{PREFMOC}cr_cfg.cpp
			%{PREFMOC}cr_portal.cpp
			%{PREFMOC}cr_vrml_loader.cpp
			%{PREFMOC}cr_document.cpp
			%{PREFMOC}cr_mesh_control.cpp
			%{PREFMOC}cr_mesh_editor.cpp
			%{PREFMOC}cr_vrml_control.cpp
			%{PREFMOC}cr_vrml_scene_model.cpp
			%{PREFMOC}cr_vrml_scene_tree.cpp
			%{PREFQRC}chromium.cpp
			chromiumres%SUFOBJ ) );

map {
    my $src = $_;
    my $tgt = $src;
    $tgt =~ s/\.h$/.cpp/;
    Command $buildenv $BUILD . '/%{PREFMOC}' . $tgt, "$BUILD/$src", q(%MOCCOM);
} qw( cr_cfg.h 
      cr_portal.h
      cr_vrml_loader.h
      cr_document.h
      cr_mesh_control.h
      cr_mesh_editor.h
      cr_vrml_control.h
      cr_vrml_scene_model.h
      cr_vrml_scene_tree.h );

Install $buildenv "$BLIB/bin", $TARGET;

map {
    my $src = "$BUILD/$_";
    my $tgt = $src;
    $tgt =~ s/.in$//i;
    Command $buildenv $tgt, $src, "$BLIB/config/config-local.dpo",
      q([perl] template_apply( '%>', qw(%<) ); );
} qw( cr_config.h.in );

sub template_apply {
    my ($tgt, $src, $dpo) = @_;

    my $config = eval( "do '$dpo';" );    
    if( $@ ) {
	say( "error: cant load $dpo: $@" );
	return 0;
    }
	
    our $params = { 'version' => \$version, 
		    'toolset' => \$toolset,
		    'config' => \$config };
    my $rc = Cons::Template->apply( $tgt, $src, $params );
    return $rc;
}

#
# Conscript -- end of file
#

